import{_ as s,c as n,o as p,N as a}from"./chunks/framework.8a34944b.js";const e="/awesome-typescript/assets/16-1.182ea389.webp",l="/awesome-typescript/assets/16-2.4c4f2bcd.webp",o="/awesome-typescript/assets/16-3.a1e1b19f.webp",t="/awesome-typescript/assets/16-4.9a343464.webp",r="/awesome-typescript/assets/16-5.3d1ed194.webp",c="/awesome-typescript/assets/16-6.38b3f279.webp",y="/awesome-typescript/assets/16-7.a8b04e05.webp",C="/awesome-typescript/assets/16-8.4e4ef368.webp",i="/awesome-typescript/assets/16-13.964441fa.webp",F="/awesome-typescript/assets/16-9.62fea8ce.webp",D="/awesome-typescript/assets/16-10.55c0d2fd.webp",A="/awesome-typescript/assets/16-11.07c852e9.webp",d="/awesome-typescript/assets/16-12.77a3e838.webp",S=JSON.parse('{"title":"新语法infer extends","description":"","frontmatter":{"title":"新语法infer extends"},"headers":[],"relativePath":"book/master-ts/16.md","lastUpdated":1679368403000}'),B={name:"book/master-ts/16.md"},g=a(`<p>我们知道，TypeScript 支持 infer 来提取类型的一部分，通过模式匹配的方式。</p><p>🌰比如元组类型提取最后一个元素的类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Last</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ele</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ele</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span></code></pre></div><p><img src="`+e+`" alt="Last"></p><p>🌰比如函数提取返回值类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Func</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Func</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span></code></pre></div><p><img src="`+l+'" alt="GetReturnType"></p><p>🌰比如字符串提取一部分，然后替换：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不考虑多个匹配的情况，即不使用递归</span></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReplaceStr</span><span style="color:#89DDFF;">&lt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Str</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">From</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Str</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`${</span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Prefix</span><span style="color:#89DDFF;">}${</span><span style="color:#FFCB6B;">From</span><span style="color:#89DDFF;">}${</span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Suffix</span><span style="color:#89DDFF;">}`</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`${</span><span style="color:#FFCB6B;">Prefix</span><span style="color:#89DDFF;">}${</span><span style="color:#FFCB6B;">To</span><span style="color:#89DDFF;">}${</span><span style="color:#FFCB6B;">Suffix</span><span style="color:#89DDFF;">}`</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Str</span></span>\n<span class="line"></span></code></pre></div><p><img src="'+o+`" alt="ReplaceStr"></p><p><strong>模式匹配就是通过一个类型匹配一个模式类型，需要提取的部分通过 <code>infer</code> 声明一个局部变量，这样就能从局部变量里拿到提取的类型。</strong></p><p>infer 的模式匹配用法还是挺好理解的。</p><p>但是 infer 有一个问题，比如这样：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestLast1</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Last</span><span style="color:#A6ACCD;">]</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">最后一个是：</span><span style="color:#89DDFF;">\${</span><span style="color:#FFCB6B;">Last</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span></code></pre></div><p>📚从 string 数组中提取的元素，默认会推导为 <code>unknown</code> 类型，这就导致了不能直接把它当 string 用：</p><p><img src="`+t+'" alt="TestLast"></p><p>那怎么办呢？</p><p>之前的处理方式是这样的：</p><p><img src="'+r+'" alt="TestLast fix 1"></p><p>加一层判断，这样 Last 就推导为 string 类型了。</p><p>或者也可以和 string <strong>取交叉类型</strong>：</p><p><img src="'+c+'" alt="TestLast fix 2"></p><p>这样也可以作为 string 来用。</p><p>但是我们明明知道这里就是 string，却还需要 <code>&amp; string</code> 或者 <code>xxx extends string</code> 来<strong>转换</strong>一次，这也太麻烦了。</p><p>TS 也知道有这个问题，所以在 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#extends-constraints-on-infer-type-variables" target="_blank" rel="noreferrer">v4.7</a> 就引入了新语法：<code>infer extends</code>🎉。</p><p>现在我们可以这样写：</p><p><img src="'+y+`" alt="TestLast 4.7+ fix 3"></p><p><strong>infer 的时候加上 extends 来约束推导的类型，这样推导出的就不再是 unknown 了，而是约束的类型。</strong></p><p>😏这个语法是 TS 4.7 引入的，在 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-8.html#improved-inference-for-infer-types-in-template-string-types" target="_blank" rel="noreferrer">4.8</a> 又完善了一下。</p><p>比如这样一个类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NumInfer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Str</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Str</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Num</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Num</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span></code></pre></div><p>在 <code>4.7</code> 的时候推导结果是这样：</p><p><img src="`+C+'" alt="infer extends 4.7"></p><p>而 <code>4.8</code> 就是这样了：</p><p><img src="'+i+`" alt="infer extends 4.8"></p><p>📚<strong>也就是说 4.7 的时候推导出的就是 extends 约束的类型，但是 4.8 的时候，如果是基础类型，会推导出字面量类型。</strong></p><p>有了这个语法之后，除了能简化类型编程的逻辑之外，也能实现一些之前实现不了的功能：</p><p>比如提取枚举的值的类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Code</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">111</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">222</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xyz</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们都是这样写：</p><p><img src="`+F+`" alt="enum to union"></p><p>但是有的值明明是数字，却被作为了字符串，所以要再处理一下，转换成数字类型，这时候就可以用 infer extends 了：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StrToNum</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Str</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Str</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Num</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Num</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Str</span></span>
<span class="line"></span></code></pre></div><p>做完 string 到 number 的转换，就拿到了我们想要的结果：</p><p><img src="`+D+'" alt="StrToNum"></p><p>这就是 infer extends 的第二个作用。</p><p>📚<strong>处理 string 转 number 之外，也可以转 boolean、null 等类型：</strong></p><p><img src="'+A+'" alt="StrToBoolean"></p><p><img src="'+d+'" alt="StrToNull"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Typescript 支持 infer 类型，可以通过模式匹配的方式，提取一部分类型返回。</p><p>但是 infer 提取出的类型是 <code>unknown</code>，后面用的时候需要类似和 string 取交叉类型，或者 <code>xxx extends string</code> 这样的方式来转换成别的类型来用。这样比较麻烦。</p><p>所以 <code>TS 4.7</code> 实现了 infer extends 的语法，可以指定推导出的类型，这样简化了类型编程。</p><p>而且，infer extends 还可以用来做类型转换，比如 string 转 number、转 boolean 等。</p><p>要注意的是，4.7 的时候，推导出的只是 extends 约束的类型，比如 number、boolean，但是 <code>4.8</code> 就能推导出字面量类型了，比如 1、2、true、false 这种。</p><p>有了 infer extends，不但能简化类型编程，还能实现一些之前很难实现的类型转换，是很有用的一个新语法。</p><ul><li><p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#extends-constraints-on-infer-type-variables" target="_blank" rel="noreferrer">TS4.7 extends Constraints on infer Type Variables</a></p></li><li><p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-8.html#improved-inference-for-infer-types-in-template-string-types" target="_blank" rel="noreferrer">TS4.8 Improved Inference for infer Types in Template String Types</a></p></li><li><p>原文链接</p><ul><li><a href="https://juejin.cn/post/7133438765317488677" target="_blank" rel="noreferrer">快速掌握 TypeScript 新语法：infer extends - @掘金</a></li></ul></li></ul><p>2023-03-16 11:22:05</p>',58),m=[g];function f(u,_,b,h,x,w){return p(),n("div",null,m)}const E=s(B,[["render",f]]);export{S as __pageData,E as default};
