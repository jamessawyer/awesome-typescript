import{_ as s,c as a,o as n,N as o}from"./chunks/framework.8a34944b.js";const C=JSON.parse('{"title":"ESM in Node.js","description":"","frontmatter":{"title":"ESM in Node.js"},"headers":[],"relativePath":"ts/reference/esm-in-nodejs.md","lastUpdated":1679368403000}'),p={name:"ts/reference/esm-in-nodejs.md"},l=o(`<p>最近这些年，Node.js一直在努力支持运行ESM。但由于Node.js生态是建立在CommonJS（cjs）模块基础上的，因此对这一功能的支持是一个很艰难的过程。</p><p>在这2个模块系统之间进行互操带来了很大的挑战，因为很多功能是不兼容的。然而，Node.js中对ESM的支持现在已经在Node.js中实现了，尘埃开始落定。</p><p>这也是为什么TypeScript引入了2个新的 <code>module</code> 和 <code>moduleResolution</code> 设置：<code>node16</code> &amp; <code>nodenext</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-mOn4W" id="tab-GHZ3g74" checked="checked"><label for="tab-GHZ3g74">tsconfig.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nodenext</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><p>这些新模式带来了更高级的功能。</p><h2 id="package-json中的type字段和新文件扩展" tabindex="-1"><code>package.json</code>中的<code>type</code>字段和新文件扩展 <a class="header-anchor" href="#package-json中的type字段和新文件扩展" aria-label="Permalink to &quot;\`package.json\`中的\`type\`字段和新文件扩展&quot;">​</a></h2><p>Node.js支持 <a href="https://nodejs.org/api/packages.html#packages_package_json_and_file_extensions" target="_blank" rel="noreferrer">新的设置项</a>，叫做 <code>type</code>。<code>type</code> 可以设置为 <code>&quot;module&quot;</code> 或者 <code>&quot;commonjs&quot;</code>。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Iw552" id="tab-cfSfW0J" checked="checked"><label for="tab-cfSfW0J">package.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><p>该配置项控制 <code>.js</code> 文件是以ESM模块进行解释还是CJS模块进行解释，如果不设置，默认为CJS。当一个文件被认为是ESM时，会和CJS存在一些差异：</p><ol><li><code>import/export</code> 语句 &amp; 支持顶层 <code>await</code></li><li>相对导入路径需要完整扩展（比如，我们必须写 <code>import &#39;./foo.js&#39;</code> 而不能写为 <code>import &#39;./foo&#39;</code>，忽略扩展会报错）</li><li>对 <code>node_modules</code> 中的依赖导入的解析可能不同</li><li>全局对象，比如 <code>require()</code> &amp; <code>__dirname</code> &amp; <code>__filename</code> 在ESM中是不能直接使用的</li><li>ESM对CommonJS模块的导入，需要满足特定的规则</li></ol><p>我们稍后再谈这些差异。</p><p>为了覆盖TypeScript在这个系统中的工作方式，<code>.ts</code>和<code>.tsx</code>文件现在以相同的方式工作。到TypeScript碰到 <code>.tsx | .js | .jsx</code> 文件时，它会查询 <code>package.json</code>，看是否该文件是一个ESM，并据此来决定：</p><ul><li>如何找到该文件所导入的其它模块</li><li>如果产出文件，该如何对该文件进行转换</li></ul><p>当 <code>.ts</code> 文件以ESM被编译，<code>import/export</code> 语法会在 <code>.js</code> 产物中得以保存；当它被编译为CJS，它的产出结果和 <a href="https://www.typescriptlang.org/tsconfig#module" target="_blank" rel="noreferrer">module</a> 为 <code>commonjs</code> 时一样。</p><p>这也意味着，对ESM和CJS中的 <code>.ts</code> 文件的路径解析也是不同的。比如，假设如下代码：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ./foo.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">helper</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ./bar.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">helper</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// only works in CJS</span></span>
<span class="line"><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面代码只能在CJS中正常运行，而不能在ESM中运行，<code>因为相对导入路径缺少扩展名</code>😅。</p><p>作为结果，我们不得不将 <code>foo.ts</code> 的输出结果带上扩展名进行重写 - 因此， <code>bar.ts</code> 将必须从 <code>./foo.js</code> 导入：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ./bar.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">helper</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// works in ESM &amp; CJS</span></span>
<span class="line"><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这看起来可能有点繁琐，但是TypeScript工具，比如auto-imports和路径自动填充将为你分担这些工作。</p><p>另外，这同样也适用于 <code>.d.ts</code> 文件。当TypeScript找到package中的某个 <code>.d.ts</code> 文件时，它是被当做ESM对待还是CJS对待，取决于包含文件的package。</p><h3 id="新的文件扩展" tabindex="-1">新的文件扩展 <a class="header-anchor" href="#新的文件扩展" aria-label="Permalink to &quot;新的文件扩展&quot;">​</a></h3><p>package.json中的 <code>type</code> 字段很好，因为它允许我们继续使用<code>.ts</code>和<code>.js</code>文件扩展名，这很方便;但是，你偶尔需要编写与指定类型不同的文件。你也可能只是喜欢总是明确的规定type类型。</p><p>Node.js支持2个新的扩展来帮助解决这个问题： <code>.mjs</code> &amp; <code>.cjs</code>。<code>.mjs</code> 表示ESM，<code>.cjs</code> 表示CommonJS，它们永远也不会重叠。</p><p>作为结果，TypeScript支持2个新的源文件扩展：<code>.mts</code> &amp; <code>.cts</code>。当TS将其转换为js时，分别生成 <code>.mjs</code> &amp; <code>.cjs</code>文件。</p><p>另外TS同时也至此2个新的声明文件扩展：<code>.d.mts</code> &amp; <code>.d.cts</code>。当TS生成声明文件时，分别产出 <code>.d.mts</code> &amp; <code>.d.cts</code> 文件。</p><p>使用这些扩展完全是可选的。</p><h2 id="与commonjs互操" tabindex="-1">与CommonJS互操 <a class="header-anchor" href="#与commonjs互操" aria-label="Permalink to &quot;与CommonJS互操&quot;">​</a></h2><p>🎉 Node.js允许ESM导入CJS模块，就好像CJS模块是存在默认导出的ESM模块。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-nUb2v" id="tab-B1RgOUF" checked="checked"><label for="tab-B1RgOUF">index.mts</label><input type="radio" name="group-nUb2v" id="tab-Lsgtj4J"><label for="tab-Lsgtj4J">helper.cjs</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导入CJS模块</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./helper.cjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 打印 hello world!</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">helper</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><p>在某些情形下，Node.js还会合成来自CJS中有名导出（<code>named exports</code>），这会更加的方便。这种情况下，ESM可以使用 <code>namespace-style</code> 导入的方式（比如： <code>import * as foo from &#39;...&#39;</code>）,或者有名导入（比如：<code>import { helper } from &#39;...&#39;</code>）:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-ahzzt" id="tab-utGlDaA" checked="checked"><label for="tab-utGlDaA">index.mts</label><input type="radio" name="group-ahzzt" id="tab-d-Zs9aa"><label for="tab-d-Zs9aa">helper.cjs</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导入有名导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">helper</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./helper.cjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 打印 hello world!</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">helper</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><p>对于TypeScript来说，并不是总有办法知道这些命名的导入是否会被合成，但是TypeScript会在允许的情况下犯错，当从一个肯定是CommonJS模块的文件中导入时，它会使用一些启发式方法。</p><p>TypeScript独有的一种互操导入语法如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>在CommonJS模块下，它会直接调用CJS中的 <code>require()</code> 方法；而在ES模块下，通过导入 <a href="https://nodejs.org/api/module.html#module_module_createrequire_filename" target="_blank" rel="noreferrer">creatRequire</a> 方法达成相同的目的。这将降低代码在浏览器(不支持require())等运行时的可移植性，但对于互操作性通常很有用。反过来，你可以使用下面的语法来写上面的例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">helper</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.cjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>📚最后，从CJS模块中导入ESM模块的唯一方式就是通过动态调用 <code>import()</code> 。这可能会带来挑战，但这就是当今Node.js的行为。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 比如在CJS模块中导入纯esm模块：chalk</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> chalk</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chalk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chalk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">yellow</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>更多可参考：</p><ul><li><a href="https://nodejs.org/api/esm.html#esm_interoperability_with_commonjs" target="_blank" rel="noreferrer">ESM/CommonJS interop in Node.js</a></li></ul><h2 id="package-json-exports-imports和自引用" tabindex="-1"><code>package.json</code> Exports,Imports和自引用 <a class="header-anchor" href="#package-json-exports-imports和自引用" aria-label="Permalink to &quot;\`package.json\` Exports,Imports和自引用&quot;">​</a></h2><p>Node.js支持在package.json中定义<a href="https://nodejs.org/api/packages.html#packages_exports" target="_blank" rel="noreferrer">一个称之为 exports 的新字段</a>来定义入口点。这个字段比package.json中的 <code>main</code> 字段功能更强大，它能控制package中的哪些部分能暴露给消费者😎。</p><p>下面是支持ESM和CJS不同入口点的package.json文件：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-OewXv" id="tab-Au6he2v" checked="checked"><label for="tab-Au6he2v">package.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 对ESM使用 import 的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./esm/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 对CJS使用 require 的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./commonjs/index.cjs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 对于Node.js老版本的fallback</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./commonjs/index.cjs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div></div><p>这个功能很多，可参考 <a href="https://nodejs.org/api/packages.html" target="_blank" rel="noreferrer">Nodejs#package文档</a>。我们将关注TypeScript是如何对它进行支持的。</p><p>使用TypeScript原始的Node支持，它会查找一个<code>main</code>字段，然后查找与该条目对应的声明文件。比如，<code>&quot;main&quot;</code> 指向 <code>./lib/index.js</code>，TypeScript会查找一个称为 <code>./lib.index.d.ts</code> 的文件。npm包的作者可以通过另一个 <code>types</code> 字段（比如 <code>&quot;types&quot;: &quot;./types/index.d.ts&quot;</code>）来覆盖这一默认行为。</p><p>新的支持工作原理类似于 <a href="https://nodejs.org/api/packages.html" target="_blank" rel="noreferrer">Node导入条件</a>。默认情况下，TypeScript用导入条件覆盖了相同的规则——如果你从ES模块写导入，它会查找<code>import</code>字段，而从CommonJS模块，它会查找<code>require</code>字段。如果找到它们，它将寻找一个合并声明文件。如果需要为类型声明指向不同的位置，可以添加 <code>types</code> 导入条件。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 🚨typescript解析的入口点 - 必须放在第一位</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./types/index.d.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 对ESM使用 import 的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./esm/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 对CJS使用 require 的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./commonjs/index.cjs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 对于Node.js老版本的fallback</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./commonjs/index.cjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 对老版本TypeScript的fallback</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./types/index.d.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>TypeScript以类似的方式同样支持 <a href="https://nodejs.org/api/packages.html#packages_imports" target="_blank" rel="noreferrer">package.json#imports</a> 字段（在相应的文件旁边寻找声明文件），并支持 <a href="https://nodejs.org/api/packages.html#packages_self_referencing_a_package_using_its_name" target="_blank" rel="noreferrer">package.json自我引用</a>。这些特性通常不怎么用到，但是是受支持的。</p><p>2023年02月23日18:08:36</p>`,51),e=[l];function t(c,r,y,D,i,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
