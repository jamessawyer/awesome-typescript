import{_ as s,c as l,o,N as e}from"./chunks/framework.8a34944b.js";const u=JSON.parse('{"title":"watch选项","description":"","frontmatter":{"title":"watch选项"},"headers":[],"relativePath":"ts/tsconfig/watch/index.md","lastUpdated":1679368403000}'),a={name:"ts/tsconfig/watch/index.md"},n=e(`<nav class="table-of-contents"><ul><li><a href="#watchfile">watchFile</a></li><li><a href="#watchdirectory">watchDirectory</a></li><li><a href="#fallbackpolling">fallbackPolling</a></li><li><a href="#synchronouswatchdirectory">synchronousWatchDirectory</a></li><li><a href="#excludedirectories">excludeDirectories</a></li><li><a href="#excludefiles">excludeFiles</a></li></ul></nav><p>你可以配置TS <code>--watch</code> 如何工作。本节主要用于处理 <code>fs.watch</code> 和 <code>fs.watchFile</code> 具有附加约束的情况，例如在 Linux 上。你可以阅读 <a href="https://www.typescriptlang.org/docs/handbook/configuring-watch.html" target="_blank" rel="noreferrer">Configuring Watch</a> 了解更多。</p><h2 id="watchfile" tabindex="-1"><code>watchFile</code> <a class="header-anchor" href="#watchfile" aria-label="Permalink to &quot;\`watchFile\`&quot;">​</a></h2><p>这个配置用于单个文件如何被监测的策略。</p><ul><li><code>fixedPollingInterval</code>： 以固定周期，检测文件每秒变化多少次</li><li><code>priorityPollingInterval</code>：检测每个文件1s内更改几次，但是使用<code>启发式</code>检查某些类型的文件的频率要低于其他类型的文件</li><li><code>dynamicPriorityPolling</code>：使用动态队列，修改频率低的文件被检测的越少</li><li><code>useFsEvents</code>(默认)：对文件变化，尝试使用操作系统或文件系统原生事件来检测</li><li><code>useFsEventsOnParentDirectory</code>：尝试使用操作系统，文件系统原生事件监听文件父目录的变化</li></ul><div class="tip custom-block"><p class="custom-block-title">💡</p><p>可能值：</p><ul><li><code>fixedPollingInterval</code></li><li><code>priorityPollingInterval</code></li><li><code>dynamicPriotityPolling</code></li><li><code>fixedChunkSizePolling</code></li><li><code>useFsEvents</code></li><li><code>useFsEventsOnParentDirectory</code></li></ul></div><h2 id="watchdirectory" tabindex="-1"><code>watchDirectory</code> <a class="header-anchor" href="#watchdirectory" aria-label="Permalink to &quot;\`watchDirectory\`&quot;">​</a></h2><p>在缺乏递归文件监视功能的系统下，如何监视整个目录树的策略。</p><ul><li><code>fixedPollingInterval</code>: 以固定周期，检测文件每秒变化多少次</li><li><code>dynamicPriorityPolling</code>： 使用动态队列，修改频率低的目录被检测的越少</li><li><code>useFsEvents</code> (默认)：尝试对目录变更使用操作系统或文件系统原生事件</li></ul><div class="tip custom-block"><p class="custom-block-title">💡</p><p>可能值：</p><ul><li><code>fixedPollingInterval</code></li><li><code>dynamicPriotityPolling</code></li><li><code>fixedChunkSizePolling</code></li><li><code>useFsEvents</code></li></ul></div><h2 id="fallbackpolling" tabindex="-1"><code>fallbackPolling</code> <a class="header-anchor" href="#fallbackpolling" aria-label="Permalink to &quot;\`fallbackPolling\`&quot;">​</a></h2><p>当使用文件系统事件，这个配置项用于当原生事件watchers用完 <code>&amp;|</code> 不支持原生文件watchers时， 指定回退的轮询策略。</p><ul><li><code>fixedPollingInterval</code>：以固定周期，检测文件每秒变化多少次</li><li><code>priorityPollingInterval</code>: 检测文件每秒变化多少次，但是使用<code>启发式</code>检查某些类型的文件的频率要低于其他类型的文件</li><li><code>dynamicPriorityPolling</code>：使用动态队列，修改频率低的文件被检测的越少</li><li><code>synchronousWatchDirectory</code>：禁用对目录的延迟检测。延迟监测对很多文件可能同时变化很有用（比如：通过允许 <code>npm install</code> ，<code>node_modules</code> 的变化），但是对于一些不太常见的设置，你可能需要使用这个标志来禁用它。</li></ul><div class="tip custom-block"><p class="custom-block-title">💡</p><p>可能值：</p><ul><li><code>fixedPollingInterval</code></li><li><code>priorityInterval</code></li><li><code>dynamicPriotityPolling</code></li><li><code>fixedChunkSize</code></li></ul></div><h2 id="synchronouswatchdirectory" tabindex="-1"><code>synchronousWatchDirectory</code> <a class="header-anchor" href="#synchronouswatchdirectory" aria-label="Permalink to &quot;\`synchronousWatchDirectory\`&quot;">​</a></h2><p>在不支持原生递归监视的平台上，同步调用回调并更新目录监视程序的状态。而不是给出一个小超时，以允许在一个文件上可能发生多个编辑。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">watchOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">synchronousWatchDirectory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="excludedirectories" tabindex="-1"><code>excludeDirectories</code> <a class="header-anchor" href="#excludedirectories" aria-label="Permalink to &quot;\`excludeDirectories\`&quot;">​</a></h2><p>你可以使用 excludeFiles 极大的减少使用 <code>--watch</code> 选项时监测的文件数量。这是一种很有用的方法，可以减少TypeScript在Linux上跟踪的打开文件的数量。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">watchOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">excludeDirectories</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/node_modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">temp/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="excludefiles" tabindex="-1"><code>excludeFiles</code> <a class="header-anchor" href="#excludefiles" aria-label="Permalink to &quot;\`excludeFiles\`&quot;">​</a></h2><p>你可以使用这个配置从监视的文件中删除一组特定的文件。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">watchOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">excludeFiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">temp/file.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>原文档：</p><ul><li><a href="https://www.typescriptlang.org/tsconfig#watch-options" target="_blank" rel="noreferrer">Watch Options</a></li></ul><p>2022年08月22日23:42:49</p>`,26),c=[n];function t(i,p,r,d,D,y){return o(),l("div",null,c)}const h=s(a,[["render",t]]);export{u as __pageData,h as default};
