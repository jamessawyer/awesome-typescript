import{_ as s,c as n,o as a,b as l}from"./app.758655e4.js";const A=JSON.parse('{"title":"Enums","description":"","frontmatter":{"title":"Enums"},"headers":[{"level":2,"title":"1️⃣ 数值枚举","slug":"_1️⃣-数值枚举","link":"#_1️⃣-数值枚举","children":[]},{"level":2,"title":"2️⃣ 字符串枚举","slug":"_2️⃣-字符串枚举","link":"#_2️⃣-字符串枚举","children":[]},{"level":2,"title":"3️⃣ 混杂枚举","slug":"_3️⃣-混杂枚举","link":"#_3️⃣-混杂枚举","children":[]},{"level":2,"title":"4️⃣ ⭐ 计算和常量成员","slug":"_4️⃣-⭐-计算和常量成员","link":"#_4️⃣-⭐-计算和常量成员","children":[]},{"level":2,"title":"5️⃣ 联合枚举和枚举成员类型","slug":"_5️⃣-联合枚举和枚举成员类型","link":"#_5️⃣-联合枚举和枚举成员类型","children":[]},{"level":2,"title":"8️⃣ 环境枚举（Ambient enums）","slug":"_8️⃣-环境枚举-ambient-enums","link":"#_8️⃣-环境枚举-ambient-enums","children":[]},{"level":2,"title":"9️⃣ ⭐ 对象 vs 枚举","slug":"_9️⃣-⭐-对象-vs-枚举","link":"#_9️⃣-⭐-对象-vs-枚举","children":[]}],"relativePath":"ts/reference/enums.md","lastUpdated":1678257005000}'),p={name:"ts/reference/enums.md"},o=l(`<nav class="table-of-contents"><ul><li><a href="#_1️⃣-数值枚举">1️⃣ 数值枚举</a></li><li><a href="#_2️⃣-字符串枚举">2️⃣ 字符串枚举</a></li><li><a href="#_3️⃣-混杂枚举">3️⃣ 混杂枚举</a></li><li><a href="#_4️⃣-⭐-计算和常量成员">4️⃣ ⭐ 计算和常量成员</a></li><li><a href="#_5️⃣-联合枚举和枚举成员类型">5️⃣ 联合枚举和枚举成员类型</a></li><li><a href="#_8️⃣-环境枚举-ambient-enums">8️⃣ 环境枚举（Ambient enums）</a></li><li><a href="#_9️⃣-⭐-对象-vs-枚举">9️⃣ ⭐ 对象 vs 枚举</a></li></ul></nav><p>枚举是少有的只存在于TS，而不是JS类型级别扩展的功能。</p><p>枚举允许开发者定义一组有名常量（named constants）。使用枚举可以更容易地记录意图，或创建一组离散的案例。<code>TS同时提供基于数值类型和基于字符串的枚举。</code></p><h2 id="_1️⃣-数值枚举" tabindex="-1">1️⃣ 数值枚举 <a class="header-anchor" href="#_1️⃣-数值枚举" aria-hidden="true">#</a></h2><p>我们先从数值枚举开始，如果你从其他语言来的，你可能感到更熟悉。<strong>一个枚举可以使用 <code>enum</code> 关键词进行定义</strong>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Up </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的数值枚举，以 <code>Up</code> 为 <code>1</code> 开始。<code>后面的成员会自动增加</code>。即，<code>Direction.Up</code> 值为 <code>1</code>， <code>Down</code> 是 <code>2</code>, <code>Left</code> 是 <code>3</code>，<code>Right</code> 是 <code>4</code>。</p><p>当然，你也可以不初始化任何值：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这里，<code>Up</code> 值为 <code>0</code>，后面值依次 <code>+1</code>。<code>当我们可能不关心成员值本身，但关心每个值与同一枚举中的其他值不同时，这种自动递增行为很有用。</code></p><p>使用枚举很简单：将枚举成员作为枚举的属性访问即可，并使用枚举名作为类型声明：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  No </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Yes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">respond</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">recipient</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserResponse</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">respond</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Princess Caroline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> UserResponse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Yes)</span></span>
<span class="line"></span></code></pre></div><p>数值枚举可在 <a href="#_4%EF%B8%8F%E2%83%A3-%E8%AE%A1%E7%AE%97%E5%92%8C%E5%B8%B8%E9%87%8F%E6%88%90%E5%91%98">计算和常量成员</a> 中混合。简单来说，没有初始化器的枚举必须放在第一位，或者必须放在用数值常量或其他常量枚举成员初始化的数值枚举之后。换句话将，下面的用法是不允许的🙅🏻‍♀️：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSomeValue</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  B</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ❌ 枚举成员必须由初始化器</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2️⃣-字符串枚举" tabindex="-1">2️⃣ 字符串枚举 <a class="header-anchor" href="#_2️⃣-字符串枚举" aria-hidden="true">#</a></h2><p>字符串枚举是一个类似的概念，但正如下面文档所示，存在一些微妙的 <a href="https://www.typescriptlang.org/docs/handbook/enums.html#enums-at-runtime" target="_blank" rel="noreferrer">运行时差异</a>。</p><p>📚<code>在一个字符串枚举中，每个成员必须使用字符串字面量进行常量初始化，或者使用其它字符串枚举成员。</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Up </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">UP</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Down </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOWN</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Left </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">LEFT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Right </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RIGHT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>虽然字符串枚举没有自动递增的行为，但字符串枚举的好处是它们可以很好地<code>“序列化”</code>。换而言之，当你调试，并必须读取一个数值枚举的运行时值，它们的值通常是不透明的 - 它们不会传递任何有用的含义（尽管可以通过 <a href="#_7%EF%B8%8F%E2%83%A3-%E2%AD%90-%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84%E6%9E%9A%E4%B8%BE">reverse mapping</a> 来解决这个问题） 。字符串枚举允许你在代码运行时提供一个有意义和可读性好的值，独立于枚举成员名😎。</p><h2 id="_3️⃣-混杂枚举" tabindex="-1">3️⃣ 混杂枚举 <a class="header-anchor" href="#_3️⃣-混杂枚举" aria-hidden="true">#</a></h2><p>技术上讲，枚举可混合字符串和数值成员，但是这样做通常没有什么意义😅：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BooleanLikeHeterogeneousEnum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  No </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Yes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YES</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>除非你真的想以某种巧妙的方式利用JS运行时的行为，一般不建议你混用枚举类型。</code></p><h2 id="_4️⃣-⭐-计算和常量成员" tabindex="-1">4️⃣ ⭐ 计算和常量成员 <a class="header-anchor" href="#_4️⃣-⭐-计算和常量成员" aria-hidden="true">#</a></h2><p>📚每个枚举成员都有一个与之关联的值，要么是 <code>constant</code>（常量），要么是 <code>computed</code>（计算值）。</p><p>一个枚举成员以下情形会被认为是 <code>constant</code>：</p><ul><li><p>它是枚举中的第一个成员，并且没有初始化器，即默认赋值为 <code>0</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// E.X 是一个常量</span></span>
<span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  X</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 第一个成员，没有初始化器，默认为 0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>成员不存在初始化器，并且之前枚举成员是一个 <code>数值常量</code>。这种情况，当前枚举成员的值将在前一个成员值的基础上 <code>+1</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在 ’E1‘ 和 \`E2\` 中的所有成员都是常量</span></span>
<span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  X</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  B</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  C</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>枚举成员通过常量枚举表达式被初始化。常量枚举表达式是TS表达式的子集，它能在编译时被计算。下面是常量枚举表达式的情况：</p><ul><li>一个字面量枚举表达式（一般是字符串字面量或数字字面量）</li><li>对先前定义的常量枚举成员的引用（它可以来自不同的enum）</li><li>带括号的常量枚举表达式</li><li>应用在常量枚举表达式的 <code>+</code> | <code>-</code> | <code>~</code> 中的某个一元操作符</li><li>将常量枚举表达式作为操作数的二元操作符 <code>+ ， -， *，/，%，&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;， &amp;， |， ^</code></li></ul><p>如果常量枚举表达式计算结果为 <code>NaN | Infinity</code>，将抛出编译时错误。</p></li></ul><p>在所有其他情况下，枚举成员被认为是计算的：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FileAccess</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 常量成员</span></span>
<span class="line"><span style="color:#A6ACCD;">  None</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Read </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Write </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ReadWrite </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Read </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Write</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 计算成员</span></span>
<span class="line"><span style="color:#A6ACCD;">  G </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_5️⃣-联合枚举和枚举成员类型" tabindex="-1">5️⃣ 联合枚举和枚举成员类型 <a class="header-anchor" href="#_5️⃣-联合枚举和枚举成员类型" aria-hidden="true">#</a></h2><p>常量枚举成员中有一个特殊的子集是不会计算的:字面枚举成员。<code>字面枚举成员是一个没有初始化值或初始化值为以下几种的常量枚举成员</code>：</p><ul><li>任意字符串字面量（eg: <code>&quot;foo&quot;</code>, <code>&quot;bar&quot;</code>）</li><li>任意数值字面量（eg：<code>1</code>, <code>200</code>）</li><li>应用于任何数值字面量的一个一元 <code>-</code>（eg：<code>-1</code>，<code>-100</code>）</li></ul><p>当一个枚举中的所有成员都是字面量枚举值时，一些特殊的语义开始发挥作用。</p><ol><li><p>枚举成员同时变为类型，比如，我们可以说某些成员只能具有枚举成员的值:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShapeKind</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Circle</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Square</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Circle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShapeKind</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Circle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">radius</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Square</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShapeKine</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Square</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sideLength</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Circle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ShapeKind</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Square</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ❌ 类型 \`ShapeKind.Square\` 不能赋值给 ’ShapeKind.Circle‘</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">radius</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>另一个改变是，枚举类型本身实际上变为 <code>每个枚举成员的联合类型</code>。通过联合枚举，类型系统能够利用这样一个事实，即它知道枚举本身中存在的确切的值集。正因为如此，TypeScript可以通过对比值来捕捉那些可能值不正确的bug。例如:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Foo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Bar</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">E</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">E</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Bar</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ❌ 这个条件永远为true，因为类型 \`E.Foo\` 和 \`E.Bar\` 不存在重叠</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面例子中，我们先检查了 <code>x</code> 不是 <code>E.Foo</code> 。如果检测成功，则我们的 <code>||</code> 将短路，<code>if</code> 语句的body将运行。然而，如果检测不成功，则 <code>x</code> 只能是 <code>E.Foo</code> 类型了，因此再去检测是否等于 <code>E.Bar</code> 就不合理了。</p><h2 id="_6️⃣-运行时的枚举" tabindex="-1">6️⃣ 运行时的枚举 <a class="header-anchor" href="#_6️⃣-运行时的枚举" aria-hidden="true">#</a></h2><p><code>枚举是运行时中真实存在的对象</code>。比如，下面枚举：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  X</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>能传递给函数：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  X</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">X</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 运行正常，因为 &#39;E&#39; 有一个名为 &#39;X&#39; 的属性，它是一个数值</span></span>
<span class="line"><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">(E)</span></span>
<span class="line"></span></code></pre></div><h2 id="_7️⃣-⭐-编译时的枚举" tabindex="-1">7️⃣ ⭐ 编译时的枚举 <a class="header-anchor" href="#_7️⃣-⭐-编译时的枚举" aria-hidden="true">#</a></h2><p>即使枚举是运行时中真实存在的对象，<code>keyof</code> 关键词可能和你期望的一般对象的工作效果有所不同。<strong>📚🚀相反，要使用 <code>keyof typeof</code> 获取以字符串形式表示的所有枚举keys的类型</strong>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LogLevel</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  ERROR</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  WARN</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  INFO</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  DEBUG</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 🤩这相当于：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * type LogLevelStrings = &#39;ERROR&#39; | &#39;WARN&#39; | &#39;INFO&#39; | &#39;DEBUG&#39;;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> LogLevelStrings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> keyof </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> LogLevel</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printImportant</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LogLevelStrings</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LogLevel</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LogLevel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WARN</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Log level key is: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Log level value is: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Log level message is: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">printImportant</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ERROR</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This is a message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_7-1-🚀反向映射-reverse-mapping" tabindex="-1">7.1 🚀反向映射（Reverse Mapping） <a class="header-anchor" href="#_7-1-🚀反向映射-reverse-mapping" aria-hidden="true">#</a></h3><p>除了为成员创建具有属性名的对象外，数值枚举成员还获得从枚举值到枚举名称的<code>反向映射</code>。</p><p>🌰:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Enum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  A</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Enum</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A</span></span>
<span class="line highlighted"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nameOfA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Enum[a] </span><span style="color:#676E95;font-style:italic;">// &#39;A&#39;</span></span>
<span class="line"></span></code></pre></div><p>TypeScript会将这编译为如下JS代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> Enum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Enum</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Enum</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Enum</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(Enum </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (Enum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Enum</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nameOfA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Enum[a]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;A&#39;</span></span>
<span class="line"></span></code></pre></div><p>上面生成的代码中，一个枚举被编译为一个对象，同时存储12个方向的映射： <code>name =&gt; value</code> &amp; 反向的 <code>value =&gt; name</code>。对其他枚举成员的引用总是作为属性访问生成，并且从不内联。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>记住，字符串枚举成员 <code>完全不会</code> 生成反向映射。</p></div><h3 id="_7-2-🚀-const-枚举" tabindex="-1">7.2 🚀 <code>const</code> 枚举 <a class="header-anchor" href="#_7-2-🚀-const-枚举" aria-hidden="true">#</a></h3><p>在大多数情况下，枚举是完美有效解决方案。但有时需求会更加严格，为了避免在访问枚举值时额外生成代码和额外间接的开销，可以使用<code>const</code>枚举。<code>常量枚举使用 const 修饰符 修饰枚举</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Enum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  B </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>常量枚举只能使用常量枚举表达式，并且不同于普通枚举（它们在编译时完全被移除）。<code>常量枚举成员在使用点（use site）被内联</code>。这是可能的，因为常量枚举没有计算成员。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  Direction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Direction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Direction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Direction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>生成的JS代码为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* Direction.Up */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* Direction.Down */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* Direction.Left */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* Direction.Right */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>译者注：常量枚举多用于性能要求比较严格的场景，它可以将枚举值进行内联</p></div></li></ol><blockquote><p>常量枚举的缺陷😅</p></blockquote><p>首先内联枚举值是直白的，但是会引发微妙的含义。这些缺陷只和<code>环境（ambient）</code>常量枚举有关（基本上是 <code>.d.ts</code> 文件中的常量枚举），并在项目间共享，如果你发布或使用 <code>.d.ts</code> 文件，这些缺陷可能会对你产生影响，因为 <code>tsc --declaration</code> 将 <code>.ts</code> 文件转换为 <code>.d.ts</code> 文件。</p><ol><li>原因已在 <a href="./../tsconfig/compiler/interop-constraints.html#isolatedmodules-👍🚀">isolatedModules</a> 编译选项文档中说明，该模式不兼容环境常量枚举。这意味着，如果你发布环境常量枚举，下游的消费者将同时不能使用 <a href="./../tsconfig/compiler/interop-constraints.html#isolatedmodules-👍🚀">isolatedModules</a> 和 这些枚举值。</li><li>你能轻松的在编译时将版本A依赖中的值内联，而在运行时导入版本B。版本A和B的枚举可能存在不同值，如果你不注意，会引发 <a href="https://github.com/microsoft/TypeScript/issues/5219#issue-110947903" target="_blank" rel="noreferrer">奇怪的bugs</a>，比如使用错误的 <code>if</code> 分支语句。这些bugs非常的致命，因为在项目构建的同时，自动运行自动测试很常见，此时使用的是相同的版本，这也导致了bugs完全会被忽略。</li><li><a href="./../tsconfig/compiler/emit.html#importsnotusedasvalues">importsNotUsedAsValues: &quot;preserve&quot;</a> 不会忽略对用作是值的常量枚举的导入，但是环境常量枚举不能确保运行时 <code>.js</code> 文件的存在。没有被解析的导入会引发运行时错误。明确忽略导入的通常方式是 <a href="https://www.typescriptlang.org/docs/handbook/modules.html#importing-types" target="_blank" rel="noreferrer">type-only imports</a>,<a href="https://github.com/microsoft/TypeScript/issues/40344" target="_blank" rel="noreferrer">暂时不允许const enum值</a>。</li></ol><p>这里有2种避免这种缺陷的方式：</p><ol><li><code>完全不使用常量枚举</code>。你可以利用linter很轻松的 <a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/FAQ.md#how-can-i-ban-specific-language-feature" target="_blank" rel="noreferrer">禁用const enums</a>。很明显，这可以避免任何常量枚举引发的问题，但这会阻止你的项目内联它自己的枚举。不同于其它项目的内联枚举，内联项目自己的枚举没有问题，而且会影响性能。</li><li><code>不要发布环境枚举常量</code>，使用 <a href="./../tsconfig/compiler/emit.html#preserveconstenums">preventConstEums</a> 编译选项的帮助。这种方式被 <a href="https://github.com/microsoft/TypeScript/pull/5422" target="_blank" rel="noreferrer">TypeScript项目本身</a> 所采用。<code>preventConstEnums</code> 以纯枚举的形式对常量枚举生成相同的JS代码。然后你就可以在 <a href="https://github.com/microsoft/TypeScript/blob/1a981d1df1810c868a66b3828497f049a944951c/Gulpfile.js#L144" target="_blank" rel="noreferrer">构建步骤中</a> 安全的从 <code>.d.ts</code> 文件中剥离 <code>const</code> 修饰符。</li></ol><p>这样，下游的消费者将不会从你的项目中内联枚举，避免以上缺陷，<code>但是项目仍然可以内联自己的枚举，而不是完全禁用掉常量枚举</code>。</p><h2 id="_8️⃣-环境枚举-ambient-enums" tabindex="-1">8️⃣ 环境枚举（<code>Ambient enums</code>） <a class="header-anchor" href="#_8️⃣-环境枚举-ambient-enums" aria-hidden="true">#</a></h2><p>环境枚举用于描述已经存在的枚举类型形状。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Enum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  B</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  C </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>环境枚举和非环境枚举的一个重要区别是，在普通枚举中，没有初始化器的成员如果上一个枚举成员被认为是常量时，它也将被认为是常量。相比之下，一个没有初始化器的环境（并且非常量）枚举成员 <code>总是</code> 认为是计算的。</p><h2 id="_9️⃣-⭐-对象-vs-枚举" tabindex="-1">9️⃣ ⭐ 对象 vs 枚举 <a class="header-anchor" href="#_9️⃣-⭐-对象-vs-枚举" aria-hidden="true">#</a></h2><p>在现代TypeScript中，当一个对象使用 <code>as const</code> 声明已经足够时:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EDirection</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ODirection </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Up</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Down</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">EDirection</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Up </span><span style="color:#676E95;font-style:italic;">// (enum member) EDirection.Up = 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ODirection</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Up </span><span style="color:#676E95;font-style:italic;">// (property) Up: 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用枚举作为参数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">walk</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EDirection</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 🚀它需要一个额外的内联来获取它的值</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// type Direction = 0 | 1 | 2 | 3</span></span>
<span class="line highlighted"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> ODirection[keyof </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> ODirection]</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Direction</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">walk</span><span style="color:#A6ACCD;">(EDirection</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Left)</span></span>
<span class="line"><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(ODirection</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Right)</span></span>
<span class="line"></span></code></pre></div><p>偏好对象方式优于TypeScript的最大依据是，这种方式使你的代码更向JavaScript的状态看齐，<a href="https://github.com/rbuckton/proposal-enum" target="_blank" rel="noreferrer">当或如果</a> 枚举被添加到JS规范中是，你可以再转向枚举的写法🤣。</p><p>原文档：</p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/enums.html" target="_blank" rel="noreferrer">Enums</a></li></ul><p>2022年09月12日12:32:24</p>`,51),e=[o];function c(t,r,y,D,i,F){return a(),n("div",null,e)}const d=s(p,[["render",c]]);export{A as __pageData,d as default};
