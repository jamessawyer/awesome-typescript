import{_ as s,c as a,o as l,b as n}from"./app.69ace8b7.js";const C=JSON.parse('{"title":"Deep Dive","description":"","frontmatter":{"title":"Deep Dive"},"headers":[{"level":2,"title":"1️⃣ 声明文件理论：深入","slug":"_1️⃣-声明文件理论-深入","link":"#_1️⃣-声明文件理论-深入","children":[]},{"level":2,"title":"2️⃣ 关键概念","slug":"_2️⃣-关键概念","link":"#_2️⃣-关键概念","children":[{"level":3,"title":"2.1 类型（Types）","slug":"_2-1-类型-types","link":"#_2-1-类型-types","children":[]},{"level":3,"title":"2.2 值（Values）","slug":"_2-2-值-values","link":"#_2-2-值-values","children":[]},{"level":3,"title":"2.3 命名空间（Namespaces）","slug":"_2-3-命名空间-namespaces","link":"#_2-3-命名空间-namespaces","children":[]}]},{"level":2,"title":"3️⃣ 简单组合：一个名字，多重意思","slug":"_3️⃣-简单组合-一个名字-多重意思","link":"#_3️⃣-简单组合-一个名字-多重意思","children":[{"level":3,"title":"3.1 内置组合","slug":"_3-1-内置组合","link":"#_3-1-内置组合","children":[]},{"level":3,"title":"3.2 ⭐ 用户组合","slug":"_3-2-⭐-用户组合","link":"#_3-2-⭐-用户组合","children":[]}]},{"level":2,"title":"4️⃣ 高级组合","slug":"_4️⃣-高级组合","link":"#_4️⃣-高级组合","children":[{"level":3,"title":"4.1 🚀 使用 interface 添加","slug":"_4-1-🚀-使用-interface-添加","link":"#_4-1-🚀-使用-interface-添加","children":[]},{"level":3,"title":"4.2 使用 namespace 添加","slug":"_4-2-使用-namespace-添加","link":"#_4-2-使用-namespace-添加","children":[]}]}],"relativePath":"ts/dfile/deep-dive.md","lastUpdated":1677750048000}'),e={name:"ts/dfile/deep-dive.md"},p=n(`<nav class="table-of-contents"><ul><li><a href="#_1️⃣-声明文件理论-深入">1️⃣ 声明文件理论：深入</a></li><li><a href="#_2️⃣-关键概念">2️⃣ 关键概念</a><ul><li><a href="#_2-1-类型-types">2.1 类型（Types）</a></li><li><a href="#_2-2-值-values">2.2 值（Values）</a></li><li><a href="#_2-3-命名空间-namespaces">2.3 命名空间（Namespaces）</a></li></ul></li><li><a href="#_3️⃣-简单组合-一个名字-多重意思">3️⃣ 简单组合：一个名字，多重意思</a><ul><li><a href="#_3-1-内置组合">3.1 内置组合</a></li><li><a href="#_3-2-⭐-用户组合">3.2 ⭐ 用户组合</a></li></ul></li><li><a href="#_4️⃣-高级组合">4️⃣ 高级组合</a><ul><li><a href="#_4-1-🚀-使用-interface-添加">4.1 🚀 使用 interface 添加</a></li><li><a href="#_4-2-使用-namespace-添加">4.2 使用 namespace 添加</a></li></ul></li></ul></nav><h2 id="_1️⃣-声明文件理论-深入" tabindex="-1">1️⃣ 声明文件理论：深入 <a class="header-anchor" href="#_1️⃣-声明文件理论-深入" aria-hidden="true">#</a></h2><p>构造模块以提供你想要的确切API形状可能很棘手。比如，我们可能希望一个模块能够使用 <code>new</code> 或者不使用 <code>new</code> 产生不同类型，在层次结构中暴露了各种命名类型，并在模块对象上存在一些属性。 通过阅读这个指南，你将使用工具写出更为复杂的声明文件，友好的暴露API表面。本指南关注模块（或UMD），因为它们的配置变化更加丰富。</p><h2 id="_2️⃣-关键概念" tabindex="-1">2️⃣ 关键概念 <a class="header-anchor" href="#_2️⃣-关键概念" aria-hidden="true">#</a></h2><p>只有理解了TypeScript是如何运作的核心概念后，你才能完全理解如何制作任意想要的声明。</p><h3 id="_2-1-类型-types" tabindex="-1">2.1 类型（<code>Types</code>） <a class="header-anchor" href="#_2-1-类型-types" aria-hidden="true">#</a></h3><p>如果你正在阅读本指南，你可能大概已经知道TS类型是什么了。但是，更明确地说，下面方式会产生<code>类型</code>:</p><ul><li>一个类型别名声明（<code>type sn = number | string</code>）</li><li>一个接口声明（<code>interface I { x: number[] }</code>）</li><li>✨ 一个类声明（<code>class C {}</code>）</li><li>一个枚举声明（<code>enum E {A, B, C}</code>）</li><li>一个 <code>import</code> 声明，用于引用某个类型</li></ul><p>上面的每一种声明形式都会创建一个新的类型名😎。</p><h3 id="_2-2-值-values" tabindex="-1">2.2 值（<code>Values</code>） <a class="header-anchor" href="#_2-2-值-values" aria-hidden="true">#</a></h3><p>通过类型，你可能已经理解了什么是值。值是我们可以在表达式中引用的运行时名。比如 <code>let x = 5;</code> 创建一个称之为 <code>x</code> 的值。</p><p>同样，为了更加明显，下面的东西会创建值：</p><ul><li><code>let, const &amp; var</code> 声明</li><li><code>namespace | module</code> 声明会包含值</li><li><code>enum</code> 声明</li><li>✨ <code>class</code> 声明</li><li><code>import</code> 声明会引用一个值</li><li><code>function</code> 声明</li></ul><h3 id="_2-3-命名空间-namespaces" tabindex="-1">2.3 命名空间（<code>Namespaces</code>） <a class="header-anchor" href="#_2-3-命名空间-namespaces" aria-hidden="true">#</a></h3><p>类型可存在于 <code>命名空间</code> 中。比如，如果我们有 <code>let x: A.B.C</code> 这样的声明，表示类型 <code>C</code> 来自于 <code>A.B</code> 命名空间。</p><p>这个区别是微妙但重要的 - 这里， <code>A.B</code> 不必是一个类型或者值。</p><h2 id="_3️⃣-简单组合-一个名字-多重意思" tabindex="-1">3️⃣ 简单组合：一个名字，多重意思 <a class="header-anchor" href="#_3️⃣-简单组合-一个名字-多重意思" aria-hidden="true">#</a></h2><p>给定一个名字 <code>A</code>，我们可能找到 <code>A</code> 的3个不同含义：</p><ol><li>一种类型</li><li>一个值</li><li>一个命名空间</li></ol><p><code>该名字如何被理解，完全取决于它被使用的上下文环境。</code> 比如，在 <code>let m: A.A = A;</code> 声明中，<code>A</code> 首先被用作命名空间，然后被当做一种类型名，最后当做是一个值。这些含义最终会指向完全不同的声明。</p><p>这看起来可能很困惑，但实际上它非常方便，只要我们不过度使用这些东西。<strong>让我们看看这种结合行为的有用之处。</strong></p><h3 id="_3-1-内置组合" tabindex="-1">3.1 内置组合 <a class="header-anchor" href="#_3-1-内置组合" aria-hidden="true">#</a></h3><p>😎机敏的读者会注意到这一点，比如，<code>class</code> 同时出现在 <code>type</code> 和 <code>value</code> 列表中。<code>class C {}</code> 声明创建了2个东西：</p><ul><li>一个 <code>类型C</code>，它指向该类的实例，</li><li>以及一个 <code>值C</code>，它指向该类的构造函数。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>枚举声明表现类似。</p></div><h3 id="_3-2-⭐-用户组合" tabindex="-1">3.2 ⭐ 用户组合 <a class="header-anchor" href="#_3-2-⭐-用户组合" aria-hidden="true">#</a></h3><p>假设写一个模块文件 <code>foo.d.ts</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> SomeVar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SomeType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SomeType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后使用它：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">SomeType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SomeVar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count)</span></span>
<span class="line"></span></code></pre></div><p>这很好用，但我们可能会想象 <code>SomeType</code> 和 <code>SomeVar</code> 非常密切相关，因此你希望它们具有相同的名称。<code>我们可以使用组合表示这2个不同对象（值和类型）在相同的名字 Bar 中</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> Bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这为在消费代码中解构提供了一个非常好的机会:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Bar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count)</span></span>
<span class="line"></span></code></pre></div><p>再一次，这里我们使用 <code>Bar</code> 同时作为类型和值在使用😎。注意，我们不需要声明 <code>Bar</code> 值作为 <code>Bar</code> 类型 - 它们是独立的。</p><h2 id="_4️⃣-高级组合" tabindex="-1">4️⃣ 高级组合 <a class="header-anchor" href="#_4️⃣-高级组合" aria-hidden="true">#</a></h2><p>📚某些声明可以跨多个声明进行组合。比如，<code>class C {}</code> 和 <code>interface C {}</code> 能共存，并且同时给 <code>C</code> 类型贡献属性。</p><p>这是合法的，只要它们不产生冲突。一般的经验法则是，值总是与同名的其他值冲突，除非它们被声明为 <code>namespace s</code>，类型会冲突，如果它们被声明为类型别名（<code>type s = string</code>）, 命名空间永远不会冲突。</p><p>我们看看如何使用它们。</p><h3 id="_4-1-🚀-使用-interface-添加" tabindex="-1">4.1 🚀 使用 <code>interface</code> 添加 <a class="header-anchor" href="#_4-1-🚀-使用-interface-添加" aria-hidden="true">#</a></h3><p>我们可以使用 <code>interface</code> 给另一个 <code>interface</code> 声明添加额外的成员：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 别的地方</span></span>
<span class="line highlighted"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y) </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span></code></pre></div><p>这同样适用于类🤩：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 别的地方</span></span>
<span class="line highlighted"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y) </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>我们不能使用interface添加类型别名（<code>type s = string</code>）</p></div><h3 id="_4-2-使用-namespace-添加" tabindex="-1">4.2 使用 <code>namespace</code> 添加 <a class="header-anchor" href="#_4-2-使用-namespace-添加" aria-hidden="true">#</a></h3><p>命名空间（<code>namespace</code>）声明可用于添加新的类型、值和命名空间，但不会产生冲突。</p><p>例如，我们可以给一个类添加静态成员：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 某个地方</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> C</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span></code></pre></div><p>注意这个例子，我们向<code>C</code>的静态端(其构造函数)添加了一个值。这是因为我们添加了一个 <code>value</code>，所有值的容器是另一个值(类型由命名空间包含，命名空间由其他命名空间包含)。</p><p>我们也可以给类添加一个命名空间类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 某个地方</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">D</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">D</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span></code></pre></div><p>在本例中，直到我们为命名空间<code>C</code>编写了命名空间声明，才有命名空间<code>C</code>。<code>C</code> 作为命名空间的含义不会和 <code>class C</code> 作为值或类型的含义相冲突。</p><p>最后，我们可以使用 <code>namespace</code> 声明执行很多不同的合并。这不是一个特别现实的例子，但显示了各种有趣的行为:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">           </span><span style="color:#676E95;font-style:italic;">// X 作为命名空间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Y 作为类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">     </span><span style="color:#676E95;font-style:italic;">// Z 既是值也是类型</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 别处某个地方</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">           </span><span style="color:#676E95;font-style:italic;">// X 作为命名空间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Y 作为值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// Z 作为命名空间</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// X作为类型</span></span>
<span class="line"></span></code></pre></div><p>上面例子中，第一块创建了下面name含义：</p><ul><li>一个值 <code>X</code> （因为 <code>namespace</code> 声明包含一个值 <code>Z</code>）</li><li>一个命名空间 <code>X</code> （因为 <code>namespace</code> 声明包含一个类型 <code>Y</code>）</li><li>一个在 <code>X</code> 命名空间中的一个类型 <code>Y</code></li><li>一个在 <code>X</code> 命名空间中的一个类型 <code>Z</code>（类的实例）</li><li>一个值 <code>Z</code>，它是 <code>X</code> 值的一个属性（该类的构造函数）</li></ul><p>第2块创建下面name含义：</p><ul><li>一个 <code>Y</code> 值（类型 <code>number</code>），它是 <code>X</code> 值得一个属性</li><li>一个命名空间 <code>Z</code></li><li>一个值 <code>Z</code>，它是 <code>X</code> 值得一个属性</li><li>一个在 <code>X.Z</code> 命名空间中类型 <code>C</code></li><li>一个值 <code>C</code> 它是 <code>X.Z</code> 值的属性</li><li>一个类型 <code>X</code></li></ul><p>原文档:</p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/deep-dive.html" target="_blank" rel="noreferrer">Deep Dive</a></li></ul><p>2022年09月04日13:05:13</p>`,62),o=[p];function c(t,r,i,y,F,D){return l(),a("div",null,o)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
